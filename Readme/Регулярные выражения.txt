/*
Квантификаторы деляться на Жадные - ищут много, Ленивые и Липкие
* - 0 или больше предыдущего символа
+ - 1 или больше предыдущего символа
? - 0 или один  предыдущего символа. Если он вставлен после другова квантификатора, то режим жадный сменяеться на ленивый.
можно установить своё кол-во 
{2} - 2 предыдущего символа
{2, 5} - от 2 до 5 предыдущего символа
--------------------------------------------------------------
a(bc)* - то есть может быть как один символ "a" или возможно вместе с конструкцией "bc", 0 или более раз
a(bc) - здесь символ "a" и конструкция "bc" полюбому. Впринципе искать abc это тож самое
a(?!bc) - ищем символ "a", но без конструкции bc
a(?!bc)* - немного странно и смысла в этом нетпрост для понимания кину. ищем сивол "a" и без конструкции bc,
но из-за * таких условий или 0 или более. По факту мы найдём 1й символ a даже если далее bc. Короче противоречие условию(?!)
() - т.к. в скобках указывается группа которую нужно найти, у группы есть понятие Ссылка на элемент.
Каждая такая ссылка для каждой группы нумеруеться. ()\1 ()\2 ()\3. Самое интересное что эту ссылку можно перемещать. Удобно впринципе если разобраться.
Пример: 
Молокозавод - найти оло. Понятно что можно ввести (оло). Просто пример не совсем удачный, но возможность имеет большой потенциал.
([мо])([лрд])\1 - найти [м или о] далее найти [л или р или д] т.к. 1я группа находит "о", то мы имеет ссылку 1й группы и кидаем её куда нам надо.
(букв накидал прост для приличия)

 Есть понятие Увеличить результат на 1
(a)\1 - найти конкретно 2 aa, (a)\1\1 - 3 aaa (тоже самое (a){3} или (aaa))

a(bc){2,5} - один символ "a" и возможно вместе с конструкцией "bc", от 2 до 5 раз



Оператор условия ИЛИ — | или []
a(b|c) - после a должно быть или b или c
a[bc] - тоже самое т.к. в квадратных скобках указывается перечисление символов 
[0-9] - диаппазон перечислений
[^а-я] - ^ в таком раскладе отрицание в начале строки. Типо: слово которое не начинаеться с диаппазона букв
d(?=r) - нам нужна та буква "d" у которой после её стоит буква r, но r выделять нам не надо. 
(?<=r)d - нам нужна та буква "d" перед которой стоит буква r, но r выделять нам не надо. 
Отрицание
d(?!r) - нам нужна та буква "d" после которой не стоит r
(?<!r)d - нам нужна та буква "d" перед которой не стоит r

Символы.   при параметре g - глобал, обращение ко всем символам, а не к 1
\d - любая цифра
\D - всё кроме цифр
\s - пробел или символы табуляции
\S - любые символы кроме пробела
. - вообще любой символ кроме новой строки
 

Жадные квантификаторы
Пример Есть строка <div> simple div</div> test <options> нужно выделить только теги.
Пробуем искать. 
<.+> - результат такого поиска будет выделена вся строка т.к. .+ это любой символ от 1 и выше, поэтому
остановки на первых встречных символах ">" не будет. Захвачена будет вся строка. Потом движок понимает что есть ещё в условии
найти > он отступает назад до последнего искомого символа >.

Что бы движку не пришлось поглощать всю строку потом возвращаться назад нужно указать ему ленивый режим.
<.+?> - ? переходит в другой режим при использовании с другим квантификатором. . ищет символ, далее +?
переключаеться на поиск символа >, такого не находит снова возвращаеться к выполнению условия .+, потом опять проверяет есть ли 
символ > и т.д




^ - начало строки
$ - конец строки
\b - начало и конец строки. Работает для Английских букв. Можно найти конкретное слово обернув символами \brain\b
\B - не начало и не конец. Ищем текст в середине слова. Русский текст ищет полностью. Подозреваю это из-за
того что Английские буквы занимают 1 байт, русский 2 байта. Символу \B кажеться что русский текст обрамлён ещё буквами,
т.к. условие Искомый текст должен иметь ещё буквы в начале и в конце.



*/