cls или clear - очистить консоль. 
cd указание директории - переход по папкам

cd .. - переход на позицию вышесв
По умолчанию путь принадлежит дистку C поэтому модно не указывать корень С.

cd /D далее имя каталога. Пример: cd /D d:\papka
copy название файла, куда копировать  Пример: copy js-info.js tabs
mkdir название папки или md папка - создание
rmdir название папки или файла - удаление
del тоже удаляет папки, так же отдельно файлы можно или пачку файлов удалить
del папка\*  - удаляться файлы в папке

dir - проверяет собержимое папки
type nul > название файла - создание файла

date - показывает дату и время 

команды именно для терминала vscode
pwd - указывает путь 
cp - тот же copy. При копировании папок со всеми потрахами указать флаг -r
cp -r название папки, куда копировать.
mv - перемещение файлов и папок
команда touch для создание файлов не работает


команды git
1м делом как только установили git нужно войти в свой кабинет через Git branch
git config --global user.email "you@example.com"
git config --global user.name "имя" вроде как это не то имя которое вводиться 1й раз перед подключением

git config --list  выводит настройки git

Далее если папка не отслеживаеться, то ввести нужно
git init  появиться файл .gitignore

git help название команды про которую ходим узнать
git clone URL проекта. //предварительно выбрав папку в которой вводим эту команду

сначала git фиксирует изменения, после нужно добавить изменяемый файл, далее 
подписать изменения и после чего отправить.
git status - проверить статус. 4 статуса Untracked, Unmodified, Modified, Staget
git add название изменённого файла. "." выбирает все файлы. Указывается флаг -A без дальнейших названий если требуеться несколько файлов добавить
        git add подтверждает изменение файла, пересохраняя предыдущий файл. Если этого не сделать и ввести git commit то передастся
        предыдущий файл, а не новый

git commit -m "какое-то указание к изменению"  если неправильно ввести то открываеться окно

что бы отправить на github требуеться ввести репозиторий
git remote add origin и название репозитория (попробовать без .git)
git push -u origin master как я понимаю это требуеться только один раз. Если возникнет какая-то непредвиденая хуйня
ввести git push -f origin master что бы это не значило

git push - дальше можно просто тыкать и отправляет в репозиторий
git pull - если были изменения на репозитории кем-то, то эта команда проверяет изменения


Создание веток даёт возможность делать отклюнения в разработке для получения некого результата не троная основную ветку 
при этом не имея ни каких копий, а проект всё тот же. Возвращаясь к предыдущей ветке проект просто откатываеться на даной ветке.
Стандартная ветка master*
После завершения разработки на новой ветке её можно слить с основной веткой и новые изменения вступят в силу.


Иногда при некоторых манипуляциях в консоли требуеться отвечать на предлагаемые вопросы
что бы этого избежаcть нужно указать ключ в конце строки выполняемого кода:
-y   - не спрашивать 
-g   - глобально

