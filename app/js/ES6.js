arr.map((item) => item)// подразумевает return. Совершаем одно действие
arr.map(item => item)// один параметр можно опускать скобки. но я так не делаю
/*
можно делать 2 действия, но оборачивать в скобки и перечислять. Возвращается 
последнее действие
*/
arr4.map((item, index) =>(console.dir(item),item));

//Пример
let su = arr3.reduce((acc, n, i) => {
  acc[n] = arr4[i]
  return acc
}, {})
//тоже самое
let su1 = arr3.reduce((acc, n, i) => (acc[n] = arr4[i], acc), {})

//Оказываться возвращать значения можно использовав логическое значение


let newArr = [415,55,23].filter(item => {
  //каждая итерация возвращает true это приравнивается к передаче значения
  return true;//3 раза true возвращает все значения. false не возвращает
})
console.dir(newArr);//[415,55,23]
//строят интересные логические конструкции прямо в return
let newArr1 = [415,55,23,32,18,14].filter(item => {
  
  return (item <= 23 && item >=14 )//...можно собрать большую логическую цепочку
})
console.dir(newArr1);//[23,18,14]

/*###---Способ построения логического выражения---##### */
//оператор && не рассматривает 2й вариант если первый false
let f1 = () => (console.dir(1), false)//отработала
let f2 = () => (console.dir(2), true)//не отработает

console.dir((f1() && f2()));
//интересно, то что возвращается на самом деле значение последнего проверя
/*
   Интересно то что можно возвращать не bool значение. Возвращается на самом деле значение
   последнего проверяющего операнда. Если оно не false, то вернётся его содержание  
*/
//Пример 2
let f3 = () => (console.dir(1), true)
let f4 = () => (console.dir(2), 14)

console.dir((f3() && f4()));
//это говорит о том что можно составлять тернарный оператор с одним значением
console.dir((1 === 1) && 15);
//вместо
console.dir((1 === 1) ? 15 : null);


/*
  Важно разница между обычной функцией и стрелочной, это то что в обычной функции есть prototype так же у обычной
  есть в консоли подсказка передачи аргументов " f(Component) " у стрелочной такого нет 
*/