const express = require('express');
const querystring = require('querystring');
const path = require('path');
let filePath = path.join(__dirname, '../../');
let router = express.Router();
/*----------------Бибилиотека Express--------------------------------*/

let app = express();//Объект EventEmiter
app.listen(3000);//Создание сервера

let arrPage = ['about', 'news', 'lk', 'status'];//массив возможных страниц
// let app = express().listen(3000)   app.get не верно. Если только делать через событие request. Да и вообще лучше так не делать

app.use(express.static(filePath));

/*
    В запросе можно устанавливать регулярныйе выражения, таким образом отсекаю возможный ввод
    суффикса
*/
app.route('/')
    .get((req, res) => {

        res.writeHead(200);
        res.sendFile(`${filePath}index.html`); //инструмент библиотеки удобней добавлять файлы
    })

    .post((req,res) => {
        console.dir('Отправлен POST');
        res.sendFile(`${filePath}index.html`);
    });

    
    

/*
// с динамический URL и регулярный подход нужно отделять групами иначе не сработает
app.get('/(:page)(.html)?', (req, res) => {//отслеживание ввода текста по метке page
    console.dir(req.headers);
    if(arrPage.includes(req.params.page))
       fs.createReadStream(`${filePath}${req.params.page}.html`).pipe(res)
    // else
    //     fs.createReadStream(`${filePath}404.html`).pipe(res)
    // 
})



app.get('*', (req, res) => {// * - любые другие get запросы,
    console.dir(3);
    fs.createReadStream(`${filePath}404.html`).pipe(res)
})


/* Альтернативный вариант
let router = express.Router();//т.к объект роутер модульный, без use работать не будет
app.use('/', router);//1й пар. маршрут, 2 callback. 1й парам может и не передаваться

router.get('*', (req, res) => {
    console.dir(3);
    fs.createReadStream(`${filePath}404.html`).pipe(res)
})

*/

/*
    Немного о шаблонизатараз. Нужно это для того чтобы по 100 раз не вводить одно и тоже в html
    Шаблонизаторами можно работать в html как это делает php сод
    handlebars - один из шаблонизаторов

    Запросы можно посылать так же через объект router присвоив изначально его переменной получи из объекта 
    express. let router = express.Router(). Разница между app.get и router.get заключаеться в том что router.get 
    используеться в коде когда идёт разбивка кода на модули, при этом нужно привязать router к папке с которой он должен рабоать
    use('/', router) 

    Про Get запросы. 
    в URL ссылке присуствтвует знак ? после которого обычно задаються get параметры
    Пример Запроса: /api/books?page=3&limit=15
    в объекте request есть объект который принимает данные параметры называеться 

    query {
        page: 3,
        limit: 15
    }
    Про динамическое изменение страниц и объект params уже разобрался
    Пример Запроса: /api/какая-то страница
        Настроеный мой маршрут /api/:page
    params {
        page: введённое значение
    }


    Небольшое описание
    app.all(путь, callback) - выполнит если будет любой запрос, даже те которыми я не знаю
    кстате говоря app.all больше схож с app.use т.к. они впринципе реагируют на любой запрос.
    Если мы знаем точно какой хотим получать запрос то лучше использовать его,
    что бы не писать лишний код на дополнительную проверку GET это или POST
    возвращать next() чтоб запрос не застрял.
    
    app['m-search'](путь, callback)  - доп запросы express'a указываються как массив
    app.route()

    Middleware это функции которые вызываються в методе use()
    - методы get(), post() и т. д., также являются функциями промежуточной обработки, 
    которые не передают вызов дальше.
Запросы.
    Связь клиента с сервером осуществляется через запросы и ответы от сервера.
    Что бы совершать запросы на сервере требуеться установить библиотеку запросов.
    Запутано и сломало мне мозг, но работает это примерно так: Я как бы имитировал отправку запроса
    проходил 3 метра, брал данные Ajax'ом и отправлял запросы куда требовалось, далее
    получал его и выводил в html. 
    Здесь же немного иначе и не совсем понятно. 
    1е)В Ajax запросе мне всё же нужно было указать адрес, а тут NodeJS 
        слушает страницу и при её изменениях может реагировать.
    2е)Мне приходиться посылать запрос на сервер потом с сервера

    Вообщем если требуеться посылать запросы на сторону то можно через Ajax или через сервер
    - можно самому посылать запросы к стороннему API если установить npm install request --save

*/



