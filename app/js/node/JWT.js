//---Что такое TOKENS и с чем его едят.
/*
(JWT) — это токены доступа, с помощью которых можно получить доступ к защищенным ресурсам.
Они КОРОЬКОЖИВУЩИЕ, но МНОГОРАЗОВЫЕ. В них может содержаться дополнительная информация, напрмер, 
время жизни или IP-адрес, откуда идет запрос. Все зависит от желания разработчика. Но лучше не усердствовать с IP
т.к. он меняется.
(RT) — Refresh Tokens эти токены выполняют только одну специфичную задачу — получение нового токена доступа.
И на этот раз без сервера авторизации не обойтись. Они долгоживущие, но одноразовые.

Логика такая: после того как чебурек зарегался он получает ВРЕМЕННЫЙ токен (в куки как я понял) и РЕФРЕШЬ
токен который лежит на сервере - но не уверен.
Смысл в том что у человека 2 ключа JWT + RT как только JWT истекает делаеться запрос с RT
и получаем новую пару JWT + RT. У RT тоже есть время жизно но оно большое.

Для всех этих манипуляций предусмотрено 2 сервера. Сервер приложения куда отдаёться токен по которому получаем доступ
к ресурсам и сервер аунтификации куда передаёться RT для получения новой пары JWT + RT.
Как это работает пока хз.

    При регистрации пользователя и дальнейшего его подключения к приложению(сайт тоже приложение)
    проходит несколько этапов.
    1) человек тупо регистрируеться передавая данные в БД
    2) после регистрации человеку выдаёться JWT ключ
    3) в последующих обращениях человек предоставляет этот ключ
Зачем это нужно? 
1) Всё ради безопасности и как я понимаю ментше подключений к БД по пустякам.
2) Сайт состоит из микросерсвисов как я понимаю они обращаються на свои серверы и тут что-то 
    связано с тем, что у каждого приложение своё пространство с куками. Т.к. микросервисы привязаны 
    к сайту приходиться постоянно проходить через сервер хоста подтверждая личность(аунтификацию) для дальнейшего обращения к микросервису. 
И если отказывает центральный сервер, то мы не можем испоьзовать сервисы.

    

JWT состоит из 3х частей: header - заголовки, payload - полезные данные, которые храняться в JWT (называют ещё заявками 'claims')
                          signature - подпись.
JWT - кстатет JSON Web Tokens, так что наерно работать будем с JSON
JWS - JSON Web Signature
JWE - JSON Web Encrypting

Header содержит информацию как должна вычисляться подпись

*/
header = {
           "alg": "HS256",//алгоритм хеширования полная аббревиатура HMAC-SHA256
           "typ": "JWT"
          };
/*
 другой алгоритм RS256 — является ассиметричным и создает два ключа: публичный и приватный. 
 С помощью приватного ключа создается подпись, а с помощью публичного проверяется подлинность подписи..
*/
payload = { "userId": "b08f86af-35da-48f2-8fab-cef3904660bd" }//создаёться сервером
/*
    существует несколько таких заявок которые можем поместить в объект. Про них нужно читать.
    вот чуток:
    iss (issuer) — определяет приложение, из которого отправляется токен.
    sub (subject) — определяет тему токена.
    exp (expiration time) — время жизни токена.
    iat (Issued at) - определяет когда токен был запущен
    много параметров не стоит указывать т.к. это влияет на скорость создания JWT
*/
/*такой принцип кодирования подписи. это не рабочий экземпляр
const SECRET_KEY = 'cAtwa1kkEy'
const unsignedToken = encodeBase64Url(header) + '.' + base64urlEncode(payload)
const signature = HMAC-SHA256(unsignedToken, SECRET_KEY)
*/
/*
    JWT НЕ скрывает и не маскирует данные автоматически.
    JWT — это проверка, что отправленные данные были действительно отправлены авторизованным источником.
    закодированы и подписаны, это не одно и тоже, что зашифрованы.
*/

/*
    Опять же в целях безопасности пришли к выводу что использовать лучше 2 токена
    1й который не долго живёт, 2й который обновляет 1й. 
    Благодаря такому подходу мы уменьшаем задержку по времени обращения к серверу,
    С точки зрения безопасности, если всё-таки украли токен доступа, то воспользоваться 
    им смогут только ограниченное время — не больше времени его жизни.
    Чтобы злоумышленник смог пользоваться дольше — ему потребуется украсть еще и рефреш,
    но тогда настоящий пользователь узнает, что его взломали, поскольку его выкинет из системы. 
    И стоит такому пользователю снова войти в систему, он получит обновленную пару JWT+RT, а украденные превратятся в тыкву.


    Принцип работы с токенами
    Когда нужно сгенерировать новый Access Token:
    — берём Refresh Token из запроса
    — ищем его в базе и получаем код связанного с ним пользователя
    — удаляем текущий Refresh Token из базы
    — генерируем новую пару токенов
    — новый Refresh Token записываем в базу.




    При регистрации добавляем JWT в LocalStorge.setItem() 

    Проверять токен так же можно на дату. для этого можно его декодировать и проверять JSON файл - не совсем понятно

*/
































/*
    https протокол - обеспечивает защиту канала передачи данных через интернет. 
    По сути, это обертка над http, которая накладывает дополнительные криптографические протоколы — SSL и TLS
*/





